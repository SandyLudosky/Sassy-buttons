  %shared {
    margin: 0.5em;
    min-width: 10em;
    max-width: 13em;
    vertical-align: middle;
    position: relative;
    z-index: 1;
    float: left;
    span {
      vertical-align: middle;
      display: block;
      -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;
	    transition: transform 0.3s, opacity 0.3s;
	    -webkit-transition-timing-function: cubic-bezier(0.2, 1, 0.3, 1);
	    transition-timing-function: cubic-bezier(0.2, 1, 0.3, 1);
    }
    &::after {
      content: attr(data-text);
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      opacity: 0;
      -webkit-transform: translate3d(0, 25%, 0);
      transform: translate3d(0, 25%, 0)
    }
    &:hover::after {
      opacity: 1;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0);

    }
    &:hover > span {
      opacity: 0;
      -webkit-transform: translate3d(0, -25%, 0);
      transform: translate3d(0, -25%, 0);
    }
  }
  
  @mixin btn-mixin($palettes) {
    @each  $color, $value in $palettes { 
      &-#{$color} {
        @extend %shared;
        @include button-variant($value, $value);
        @include btn-mixin-shades-dark($value, 5, 1);
        @include btn-mixin-shades-light($value, 4, 1);
        color: color-contrast($value);
        &::after {
          color:  color-contrast($value)!important;
        }
    
    }
  }
 }
  @mixin btn-outline-mixin($palettes) {
    @each  $color, $value in $palettes { 
      &-#{$color} {
        @extend %shared;
        @if(lightness($value) < 90) {
          @include button-outline-variant($value);
        }
        &::after {
          color: color-contrast($value)!important;
        }
      }
    }
  }

  @mixin btn-mixins($palettes) {
    @each  $color, $value in $palettes { 
      &-#{$color} {
        @extend %shared;
        @include button-variant($value, $value);
      }
      &-outline-#{$color} {
        @extend %shared;
        @include button-outline-variant($value);
      }
    }
 }


  @function check-brightness($color, $amount) {
    $clr: null;
    @if(lightness($color) <= 10) {
      $clr: darken($color, $amount * 1%);
    } @else {
      $clr: lighten($color, $amount * 1%);
    }
    @return $clr;
  }
  
// @include btn-mixin-shades-dark($value, 6, 1);

  @mixin btn-mixin-shades-dark($color, $repetition1, $repetition2) {
    @if ($repetition2 <= 4) {
      $amount: $repetition2 * 10;
      &-#{$repetition1 * 10} {
          @extend %shared;
          $value: darken($color, $amount * 1%);
          @include button-variant($value, $value);
          &::after {
            color:  color-contrast($value)!important;
          }
        }
      @include btn-mixin-shades-dark($color, $repetition1 + 1, $repetition2 + 1);
    }
  }

  @mixin btn-mixin-shades-light($color, $repetition1,$repetition2) {
    @if ($repetition1 >= 1) {
      $amount: $repetition1 * 10;
      @debug $amount;
      &-#{$repetition2 * 10} {
          @extend %shared;
          $value: lighten($color, $amount * 1%);
          @include button-variant($value, $value);
          &::after {
            color: color-contrast($value)!important;
          }
      }
      @include btn-mixin-shades-light($color, $repetition1 - 1, $repetition2 + 1);
    }
  }

  
